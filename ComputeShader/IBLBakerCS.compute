#pragma kernel CSMainDiffuse

#define PI 3.1415926

//入参，skybox
TextureCube<float4> _Skybox;
//定义采样器，点采样，不进行插值。
SamplerState _PointClamp;
//输出
RWStructuredBuffer<float4> _Reslut;

//定义CubeMap的哪一个面
int _Face;
//定义CubeMap的分辨率
int _Resolution;

// -----------------------------------Bake Indirect Diffuse Irradiance Map-----------------------------------------
//uv值转世界向量。(在DirectX平台规则下)
float3 DirectionFromCubemapTexel(int face, float2 uv)
{
    float3 dir = 0;

    switch (face)
    {
    case 0: //+X
        dir.x = 1.0;
        dir.yz = uv.yx * -2.0 + 1.0;
        break;

    case 1: //-X
        dir.x = -1.0;
        dir.y = uv.y * -2.0f + 1.0f;
        dir.z = uv.x * 2.0f - 1.0f;
        break;

    case 2: //+Y
        dir.xz = uv * 2.0f - 1.0f;
        dir.y = 1.0f;
        break;
    case 3: //-Y
        dir.x = uv.x * 2.0f - 1.0f;
        dir.z = uv.y * -2.0f + 1.0f;
        dir.y = -1.0f;
        break;

    case 4: //+Z
        dir.x = uv.x * 2.0f - 1.0f;
        dir.y = uv.y * -2.0f + 1.0f;
        dir.z = 1;
        break;

    case 5: //-Z
        dir.xy = uv * -2.0f + 1.0f;
        dir.z = -1;
        break;
    }
    return normalize(dir);
}

[numthreads(8,8,1)]
void CSMainDiffuse(uint3 id : SV_DispatchThreadID)
{
    //+0.5/Resolution是像素中心点
    //把grid index计算为uv。
    float2 uv = (float2)id.xy / (float2)(_Resolution) + 0.5 / (float2)_Resolution;

    uint index = id.y * _Resolution + id.x;

    //计算世界向量
    float3 dir = DirectionFromCubemapTexel(_Face, uv);
    float3 tangent = float3(0, 1, 0);
    float upOrDown = dot(dir, tangent);

    //构建切线空间
    if (upOrDown == 1)
        tangent = float3(1, 0, 0);
    else if (upOrDown == -1)
        tangent = float3(-1, 0, 0);
    else
        tangent = normalize(cross(float3(0, 1, 0), dir));

    //以dir为基准，构建副法线向量
    //准备进行TBN变换，把切空间法线变换为世界法线。
    float3 binormal = normalize(cross(dir, tangent));

    float sampleDelta = 0.025;
    int N1 = 0;
    int N2 = 0;
    float3 irradiance = float3(0, 0, 0);

    //半球离散采样累加
    for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta)
    {
        N2 = 0;
        for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta)
        {
            //球面坐标，把φ和θ转换到直角坐标系。
            float3 tangentSpaceNormal = float3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
            //切空间的法线转换到世界空间
            float3 worldNormal = tangentSpaceNormal.x * tangent + tangentSpaceNormal.y * binormal + tangentSpaceNormal.z * dir;
            //黎曼和
            irradiance += _Skybox.SampleLevel(_PointClamp, worldNormal, 0).rgb * cos(theta) * sin(theta);
            N2++;
        }
        N1++;
    }

    //对应黎曼和积分
    //在这里，我们把albobe/PI中的1/PI放在了这里进行了一次约分。
    float weight = PI  / (N1 * N2);
    irradiance *= weight;
    //输出结果
    _Reslut[index] = float4(irradiance.xyz,1.0);
}

// -----------------------------------Bake Indirect Specular Roughness Mipmaps-----------------------------------------
#pragma kernel CSMainGGX
float _FilterMipRoughness;

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

float2 Hammersley(uint i, uint N)
{
    return float2(float(i)/float(N), RadicalInverse_VdC(i));
}  

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness*roughness;

    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

    // from spherical coordinates to cartesian coordinates
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    // from tangent-space vector to world-space sample vector
    float3 up        = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
    float3 tangent   = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

[numthreads(1, 1, 1)]
void CSMainGGX(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / (float2)(_Resolution) + 0.5 / (float2)_Resolution;
    uint index = id.y * _Resolution + id.x;
    float3 dir = DirectionFromCubemapTexel(_Face, uv);

    float3 irradiance = float3(0, 0, 0);
    //normalWS
    float3 N = dir;
    //reflection direction
    float3 R = N;
    //view direction
    float3 V = R;

    const uint SAMPLE_COUNT = 1024;
    float totalWeight = 0.0;
    float3 prefilteredColor =  0.0;

    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, _FilterMipRoughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);
        if (NdotL > 0.0)
        {
            prefilteredColor += _Skybox.SampleLevel(_PointClamp, L, 0).rgb * NdotL;
            totalWeight += NdotL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;
    _Reslut[index] = float4(prefilteredColor.xyz, 1.0);
}



// -----------------------------------Bake Indirect BRDF LUT-----------------------------------------

#pragma kernel CSMainBRDF

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float a = roughness;
    //这里IBL和直接光照不一样
    float k = (a * a) / 2.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

[numthreads(8, 8, 1)]
void CSMainBRDF(uint3 id : SV_DispatchThreadID)
{
    float2 uv = (float2)id.xy / (float2)(_Resolution) + 0.5/ (float2)_Resolution;
    uint index = id.y * _Resolution + id.x;
   
    float NdotV = uv.x;
    float roughness = uv.y;
    float3 V = float3(sqrt(1.0 - NdotV * NdotV),0, NdotV);

    float scale = 0.0;
    float bias = 0.0;

    float3 N = float3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 2048;
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if (NdotL > 0.0)
        {
            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            scale += (1.0 - Fc) * G_Vis;
            bias += Fc * G_Vis;
        }
    }
    scale /= float(SAMPLE_COUNT);
    bias /= float(SAMPLE_COUNT);

    _Reslut[index] = float4(scale, bias,0.0, 1.0);
}

